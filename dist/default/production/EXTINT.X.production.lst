

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat Dec 18 22:59:31 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118  0000                     	;# 
   119  0001                     	;# 
   120  0002                     	;# 
   121  0003                     	;# 
   122  0004                     	;# 
   123  0005                     	;# 
   124  0006                     	;# 
   125  0007                     	;# 
   126  0008                     	;# 
   127  0009                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001B                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  0088                     	;# 
   158  0089                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0094                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178                           
   179                           	psect	strings
   180  02A3                     __pstrings:
   181  02A3                     stringtab:
   182  02A3                     __stringtab:
   183  02A3                     stringcode:	
   184                           ;	String table - string pointers are 1 byte each
   185                           
   186  02A3                     stringdir:
   187  02A3  3002               	movlw	high stringdir
   188  02A4  008A               	movwf	10
   189  02A5  0804               	movf	4,w
   190  02A6  0A84               	incf	4,f
   191  02A7  0782               	addwf	2,f
   192  02A8                     __stringbase:
   193  02A8  3400               	retlw	0
   194  02A9                     __end_of__stringtab:
   195  02A9                     _dpowers:
   196  02A9  3401               	retlw	1
   197  02AA  3400               	retlw	0
   198  02AB  340A               	retlw	10
   199  02AC  3400               	retlw	0
   200  02AD  3464               	retlw	100
   201  02AE  3400               	retlw	0
   202  02AF  34E8               	retlw	232
   203  02B0  3403               	retlw	3
   204  02B1  3410               	retlw	16
   205  02B2  3427               	retlw	39
   206  02B3                     __end_of_dpowers:
   207  000E                     _TMR1	set	14
   208  0006                     _PORTBbits	set	6
   209  0009                     _PORTEbits	set	9
   210  0010                     _T1CONbits	set	16
   211  0007                     _PORTCbits	set	7
   212  0008                     _PORTD	set	8
   213  001E                     _ADRESH	set	30
   214  001F                     _ADCON0bits	set	31
   215  001F                     _ADCON0	set	31
   216  0059                     _INTF	set	89
   217  0080                     _TMR1ON	set	128
   218  005E                     _PEIE	set	94
   219  005F                     _GIE	set	95
   220  0031                     _RB1	set	49
   221  0060                     _TMR1IF	set	96
   222  00FA                     _GO_DONE	set	250
   223  0089                     _TRISE	set	137
   224  0087                     _TRISC	set	135
   225  0088                     _TRISD	set	136
   226  0081                     _OPTION_REG	set	129
   227  009E                     _ADRESL	set	158
   228  009F                     _ADCON1	set	159
   229  0460                     _TMR1IE	set	1120
   230  0431                     _TRISB1	set	1073
   231  0430                     _TRISB0	set	1072
   232  02B3                     STR_2:
   233  02B3  3420               	retlw	32	;' '
   234  02B4  3425               	retlw	37	;'%'
   235  02B5  3464               	retlw	100	;'d'
   236  02B6  3400               	retlw	0
   237  02B7                     STR_1:
   238  02B7  3431               	retlw	49	;'1'
   239  02B8  3400               	retlw	0
   240                           
   241                           	psect	cinit
   242  000F                     start_initialization:	
   243                           ; #config settings
   244                           
   245  000F                     __initialization:
   246                           
   247                           ; Clear objects allocated to BANK0
   248  000F  1283               	bcf	3,5	;RP0=0, select bank0
   249  0010  1303               	bcf	3,6	;RP1=0, select bank0
   250  0011  01B9               	clrf	__pbssBANK0& (0+127)
   251  0012  01BA               	clrf	(__pbssBANK0+1)& (0+127)
   252  0013  01BB               	clrf	(__pbssBANK0+2)& (0+127)
   253  0014  01BC               	clrf	(__pbssBANK0+3)& (0+127)
   254  0015                     end_of_initialization:	
   255                           ;End of C runtime variable initialization code
   256                           
   257  0015                     __end_of__initialization:
   258  0015  0183               	clrf	3
   259  0016  120A  118A  2903   	ljmp	_main	;jump to C main() function
   260                           
   261                           	psect	bssBANK0
   262  0039                     __pbssBANK0:
   263  0039                     _timerOn:
   264  0039                     	ds	2
   265  003B                     _timer:
   266  003B                     	ds	2
   267                           
   268                           	psect	cstackCOMMON
   269  0070                     __pcstackCOMMON:
   270  0070                     ?_adc_init:
   271  0070                     ?_lcd_data:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_lcd_cmd:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_lcd_init:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_isr:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ??_isr:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_main:	
   287                           ; 1 bytes @ 0x0
   288                           
   289                           
   290                           ; 1 bytes @ 0x0
   291  0070                     	ds	2
   292  0072                     ??_adc_init:
   293  0072                     ??_lcd_data:	
   294                           ; 1 bytes @ 0x2
   295                           
   296  0072                     ??_lcd_cmd:	
   297                           ; 1 bytes @ 0x2
   298                           
   299  0072                     ?_strlen:	
   300                           ; 1 bytes @ 0x2
   301                           
   302  0072                     ?_ADC_Read:	
   303                           ; 2 bytes @ 0x2
   304                           
   305  0072                     ?___lwdiv:	
   306                           ; 2 bytes @ 0x2
   307                           
   308  0072                     ___lwdiv@divisor:	
   309                           ; 2 bytes @ 0x2
   310                           
   311                           
   312                           ; 2 bytes @ 0x2
   313  0072                     	ds	2
   314  0074                     ??_strlen:
   315  0074                     ??_ADC_Read:	
   316                           ; 1 bytes @ 0x4
   317                           
   318  0074                     lcd_data@data:	
   319                           ; 1 bytes @ 0x4
   320                           
   321  0074                     lcd_cmd@cmd:	
   322                           ; 1 bytes @ 0x4
   323                           
   324  0074                     ___lwdiv@dividend:	
   325                           ; 1 bytes @ 0x4
   326                           
   327                           
   328                           ; 2 bytes @ 0x4
   329  0074                     	ds	1
   330  0075                     ??_lcd_init:
   331  0075                     strlen@s:	
   332                           ; 1 bytes @ 0x5
   333                           
   334                           
   335                           ; 1 bytes @ 0x5
   336  0075                     	ds	1
   337  0076                     ??___lwdiv:
   338  0076                     ADC_Read@ANC:	
   339                           ; 1 bytes @ 0x6
   340                           
   341  0076                     strlen@cp:	
   342                           ; 1 bytes @ 0x6
   343                           
   344                           
   345                           ; 1 bytes @ 0x6
   346  0076                     	ds	1
   347  0077                     ?_lcd_display:
   348  0077                     lcd_display@num:	
   349                           ; 1 bytes @ 0x7
   350                           
   351  0077                     ___lwdiv@quotient:	
   352                           ; 2 bytes @ 0x7
   353                           
   354                           
   355                           ; 2 bytes @ 0x7
   356  0077                     	ds	2
   357  0079                     ??_lcd_display:
   358  0079                     ___lwdiv@counter:	
   359                           ; 1 bytes @ 0x9
   360                           
   361                           
   362                           ; 1 bytes @ 0x9
   363  0079                     	ds	1
   364  007A                     ??___lwmod:
   365                           
   366                           ; 1 bytes @ 0xA
   367  007A                     	ds	1
   368  007B                     ___lwmod@counter:
   369                           
   370                           ; 1 bytes @ 0xB
   371  007B                     	ds	1
   372                           
   373                           	psect	cstackBANK0
   374  0020                     __pcstackBANK0:
   375  0020                     ?___lwmod:
   376  0020                     lcd_display@values:	
   377                           ; 2 bytes @ 0x0
   378                           
   379  0020                     ___lwmod@divisor:	
   380                           ; 1 bytes @ 0x0
   381                           
   382                           
   383                           ; 2 bytes @ 0x0
   384  0020                     	ds	1
   385  0021                     lcd_display@i:
   386                           
   387                           ; 2 bytes @ 0x1
   388  0021                     	ds	1
   389  0022                     ___lwmod@dividend:
   390                           
   391                           ; 2 bytes @ 0x2
   392  0022                     	ds	2
   393  0024                     ?_sprintf:
   394  0024                     sprintf@f:	
   395                           ; 2 bytes @ 0x4
   396                           
   397                           
   398                           ; 1 bytes @ 0x4
   399  0024                     	ds	3
   400  0027                     ??_sprintf:
   401                           
   402                           ; 1 bytes @ 0x7
   403  0027                     	ds	3
   404  002A                     sprintf@ap:
   405                           
   406                           ; 1 bytes @ 0xA
   407  002A                     	ds	1
   408  002B                     sprintf@flag:
   409                           
   410                           ; 1 bytes @ 0xB
   411  002B                     	ds	1
   412  002C                     sprintf@prec:
   413                           
   414                           ; 1 bytes @ 0xC
   415  002C                     	ds	1
   416  002D                     sprintf@val:
   417                           
   418                           ; 2 bytes @ 0xD
   419  002D                     	ds	2
   420  002F                     sprintf@sp:
   421                           
   422                           ; 1 bytes @ 0xF
   423  002F                     	ds	1
   424  0030                     sprintf@c:
   425                           
   426                           ; 1 bytes @ 0x10
   427  0030                     	ds	1
   428  0031                     ??_main:
   429                           
   430                           ; 1 bytes @ 0x11
   431  0031                     	ds	1
   432  0032                     main@valueStr:
   433                           
   434                           ; 5 bytes @ 0x12
   435  0032                     	ds	5
   436  0037                     main@adc_value:
   437                           
   438                           ; 2 bytes @ 0x17
   439  0037                     	ds	2
   440                           
   441                           	psect	maintext
   442  0103                     __pmaintext:	
   443 ;;
   444 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   445 ;;
   446 ;; *************** function _main *****************
   447 ;; Defined at:
   448 ;;		line 31 in file "main.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;		None
   451 ;; Auto vars:     Size  Location     Type
   452 ;;  valueStr        5   18[BANK0 ] unsigned char [5]
   453 ;;  adc_value       2   23[BANK0 ] int 
   454 ;; Return value:  Size  Location     Type
   455 ;;                  1    wreg      void 
   456 ;; Registers used:
   457 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   458 ;; Tracked objects:
   459 ;;		On entry : B00/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   463 ;;      Params:         0       0       0       0       0
   464 ;;      Locals:         0       7       0       0       0
   465 ;;      Temps:          0       1       0       0       0
   466 ;;      Totals:         0       8       0       0       0
   467 ;;Total ram usage:        8 bytes
   468 ;; Hardware stack levels required when called: 3
   469 ;; This function calls:
   470 ;;		_ADC_Read
   471 ;;		_adc_init
   472 ;;		_lcd_cmd
   473 ;;		_lcd_display
   474 ;;		_lcd_init
   475 ;;		_sprintf
   476 ;;		_strlen
   477 ;; This function is called by:
   478 ;;		Startup code after reset
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482                           
   483                           ;psect for function _main
   484  0103                     _main:
   485  0103                     l1185:	
   486                           ;incstack = 0
   487                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   488                           
   489                           
   490                           ;main.c: 32:     OPTION_REG = 0x07;
   491  0103  3007               	movlw	7
   492  0104  1683               	bsf	3,5	;RP0=1, select bank1
   493  0105  1303               	bcf	3,6	;RP1=0, select bank1
   494  0106  0081               	movwf	1	;volatile
   495  0107                     l1187:
   496                           
   497                           ;main.c: 33:     TMR1 = 0;
   498  0107  1283               	bcf	3,5	;RP0=0, select bank0
   499  0108  1303               	bcf	3,6	;RP1=0, select bank0
   500  0109  018E               	clrf	14	;volatile
   501  010A  018F               	clrf	15	;volatile
   502  010B                     l1189:
   503                           
   504                           ;main.c: 34:     TRISD = 0x00;
   505  010B  1683               	bsf	3,5	;RP0=1, select bank1
   506  010C  1303               	bcf	3,6	;RP1=0, select bank1
   507  010D  0188               	clrf	8	;volatile
   508  010E                     l1191:
   509                           
   510                           ;main.c: 35:     TRISC = 0x00;
   511  010E  0187               	clrf	7	;volatile
   512  010F                     l1193:
   513                           
   514                           ;main.c: 36:     TRISE = 0x00;
   515  010F  0189               	clrf	9	;volatile
   516  0110                     l1195:
   517                           
   518                           ;main.c: 37:     TRISB0 = 1;
   519  0110  1406               	bsf	6,0	;volatile
   520  0111                     l1197:
   521                           
   522                           ;main.c: 38:     TRISB1 = 0;
   523  0111  1086               	bcf	6,1	;volatile
   524  0112                     l1199:
   525                           
   526                           ;main.c: 39:     RB1 = 0;
   527  0112  1283               	bcf	3,5	;RP0=0, select bank0
   528  0113  1303               	bcf	3,6	;RP1=0, select bank0
   529  0114  1086               	bcf	6,1	;volatile
   530  0115                     l1201:
   531                           
   532                           ;main.c: 40:     GIE = 1;
   533  0115  178B               	bsf	11,7	;volatile
   534  0116                     l1203:
   535                           
   536                           ;main.c: 41:     PEIE = 1;
   537  0116  170B               	bsf	11,6	;volatile
   538  0117                     l1205:
   539                           
   540                           ;main.c: 42:     TMR1IE = 1;
   541  0117  1683               	bsf	3,5	;RP0=1, select bank1
   542  0118  1303               	bcf	3,6	;RP1=0, select bank1
   543  0119  140C               	bsf	12,0	;volatile
   544  011A                     l1207:
   545                           
   546                           ;main.c: 43:     T1CONbits.TMR1CS=0;
   547  011A  1283               	bcf	3,5	;RP0=0, select bank0
   548  011B  1303               	bcf	3,6	;RP1=0, select bank0
   549  011C  1090               	bcf	16,1	;volatile
   550  011D                     l1209:
   551                           
   552                           ;main.c: 44:     T1CONbits.T1CKPS1=0;
   553  011D  1290               	bcf	16,5	;volatile
   554  011E                     l1211:
   555                           
   556                           ;main.c: 45:     T1CONbits.T1CKPS0 = 0;
   557  011E  1210               	bcf	16,4	;volatile
   558  011F                     l1213:
   559                           
   560                           ;main.c: 46:     TMR1ON = 0;
   561  011F  1010               	bcf	16,0	;volatile
   562  0120                     l1215:
   563                           
   564                           ;main.c: 49:     PORTEbits.RE0 = 1 ;
   565  0120  1409               	bsf	9,0	;volatile
   566  0121                     l1217:
   567  0121                     l1219:
   568                           
   569                           ;main.c: 51:     char valueStr[5];;main.c: 52:     lcd_init();
   570  0121  120A  118A  228A  120A  118A  	fcall	_lcd_init
   571  0126                     l1221:
   572                           
   573                           ;main.c: 53:     adc_init();
   574  0126  120A  118A  22F7  120A  118A  	fcall	_adc_init
   575  012B                     l1223:
   576                           
   577                           ;main.c: 54:     PORTCbits.RC3 = 0;
   578  012B  1283               	bcf	3,5	;RP0=0, select bank0
   579  012C  1303               	bcf	3,6	;RP1=0, select bank0
   580  012D  1187               	bcf	7,3	;volatile
   581  012E                     l1225:
   582                           
   583                           ;main.c: 61:         if(timer == 800){
   584  012E  3020               	movlw	32
   585  012F  1283               	bcf	3,5	;RP0=0, select bank0
   586  0130  1303               	bcf	3,6	;RP1=0, select bank0
   587  0131  063B               	xorwf	_timer,w
   588  0132  3003               	movlw	3
   589  0133  1903               	skipnz
   590  0134  063C               	xorwf	_timer+1,w
   591  0135  1D03               	btfss	3,2
   592  0136  2938               	goto	u571
   593  0137  2939               	goto	u570
   594  0138                     u571:
   595  0138  2942               	goto	l1237
   596  0139                     u570:
   597  0139                     l1227:
   598                           
   599                           ;main.c: 62:             timer = 0;
   600  0139  01BB               	clrf	_timer
   601  013A  01BC               	clrf	_timer+1
   602  013B                     l1229:
   603                           
   604                           ;main.c: 63:             timerOn = 1;
   605  013B  3001               	movlw	1
   606  013C  00B9               	movwf	_timerOn
   607  013D  3000               	movlw	0
   608  013E  00BA               	movwf	_timerOn+1
   609  013F                     l1231:
   610                           
   611                           ;main.c: 64:             TMR1ON = 0;
   612  013F  1010               	bcf	16,0	;volatile
   613  0140                     l1233:
   614                           
   615                           ;main.c: 65:             PORTBbits.RB1 = 0;
   616  0140  1086               	bcf	6,1	;volatile
   617  0141                     l1235:
   618                           
   619                           ;main.c: 66:             PORTCbits.RC3 = 1;
   620  0141  1587               	bsf	7,3	;volatile
   621  0142                     l1237:
   622                           
   623                           ;main.c: 71:         PORTEbits.RE0 = 1;
   624  0142  1409               	bsf	9,0	;volatile
   625  0143                     l1239:
   626                           
   627                           ;main.c: 72:         if(INTF == 1) {
   628  0143  1C8B               	btfss	11,1	;volatile
   629  0144  2946               	goto	u581
   630  0145  2947               	goto	u580
   631  0146                     u581:
   632  0146  2949               	goto	l1243
   633  0147                     u580:
   634  0147                     l1241:
   635                           
   636                           ;main.c: 73:             RB1 = 1;
   637  0147  1486               	bsf	6,1	;volatile
   638                           
   639                           ;main.c: 74:             INTF = 0;
   640  0148  108B               	bcf	11,1	;volatile
   641  0149                     l1243:
   642                           
   643                           ;main.c: 77:         adc_value = ADC_Read(0);
   644  0149  3000               	movlw	0
   645  014A  120A  118A  221C  120A  118A  	fcall	_ADC_Read
   646  014F  0873               	movf	?_ADC_Read+1,w
   647  0150  1283               	bcf	3,5	;RP0=0, select bank0
   648  0151  1303               	bcf	3,6	;RP1=0, select bank0
   649  0152  00B8               	movwf	main@adc_value+1
   650  0153  0872               	movf	?_ADC_Read,w
   651  0154  00B7               	movwf	main@adc_value
   652  0155                     l1245:
   653                           
   654                           ;main.c: 78:         sprintf(valueStr, " %d", adc_value);
   655  0155  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   656  0156  00B1               	movwf	??_main
   657  0157  0831               	movf	??_main,w
   658  0158  00A4               	movwf	sprintf@f
   659  0159  0838               	movf	main@adc_value+1,w
   660  015A  00A6               	movwf	?_sprintf+2
   661  015B  0837               	movf	main@adc_value,w
   662  015C  00A5               	movwf	?_sprintf+1
   663  015D  3032               	movlw	(low (main@valueStr| 0))& (0+255)
   664  015E  120A  118A  2019  120A  118A  	fcall	_sprintf
   665  0163                     l1247:
   666                           
   667                           ;main.c: 79:         lcd_cmd(0x80);
   668  0163  3080               	movlw	128
   669  0164  120A  118A  22B9  120A  118A  	fcall	_lcd_cmd
   670  0169                     l1249:
   671                           
   672                           ;main.c: 80:         lcd_display(valueStr, strlen(valueStr) + 1);
   673  0169  3032               	movlw	(low (main@valueStr| 0))& (0+255)
   674  016A  120A  118A  2271  120A  118A  	fcall	_strlen
   675  016F  0872               	movf	?_strlen,w
   676  0170  3E01               	addlw	1
   677  0171  00F7               	movwf	lcd_display@num
   678  0172  0873               	movf	?_strlen+1,w
   679  0173  1803               	skipnc
   680  0174  3E01               	addlw	1
   681  0175  3E00               	addlw	0
   682  0176  00F8               	movwf	lcd_display@num+1
   683  0177  3032               	movlw	(low (main@valueStr| 0))& (0+255)
   684  0178  120A  118A  224C  120A  118A  	fcall	_lcd_display
   685  017D                     l1251:
   686                           
   687                           ;main.c: 81:         if(adc_value > 900 && TMR1ON == 0) {
   688  017D  1283               	bcf	3,5	;RP0=0, select bank0
   689  017E  1303               	bcf	3,6	;RP1=0, select bank0
   690  017F  0838               	movf	main@adc_value+1,w
   691  0180  3A80               	xorlw	128
   692  0181  00FF               	movwf	btemp+1
   693  0182  3083               	movlw	131
   694  0183  027F               	subwf	btemp+1,w
   695  0184  1D03               	skipz
   696  0185  2988               	goto	u595
   697  0186  3085               	movlw	133
   698  0187  0237               	subwf	main@adc_value,w
   699  0188                     u595:
   700  0188  1C03               	skipc
   701  0189  298B               	goto	u591
   702  018A  298C               	goto	u590
   703  018B                     u591:
   704  018B  292E               	goto	l1225
   705  018C                     u590:
   706  018C                     l1253:
   707  018C  1283               	bcf	3,5	;RP0=0, select bank0
   708  018D  1303               	bcf	3,6	;RP1=0, select bank0
   709  018E  1810               	btfsc	16,0	;volatile
   710  018F  2991               	goto	u601
   711  0190  2992               	goto	u600
   712  0191                     u601:
   713  0191  292E               	goto	l1225
   714  0192                     u600:
   715  0192                     l1255:
   716                           
   717                           ;main.c: 82:             TMR1ON = 1;
   718  0192  1410               	bsf	16,0	;volatile
   719  0193                     l1257:
   720                           
   721                           ;main.c: 83:             timerOn = 1;
   722  0193  3001               	movlw	1
   723  0194  00B9               	movwf	_timerOn
   724  0195  3000               	movlw	0
   725  0196  00BA               	movwf	_timerOn+1
   726  0197                     l1259:
   727                           
   728                           ;main.c: 84:             PORTEbits.RE0 = 0;
   729  0197  1009               	bcf	9,0	;volatile
   730  0198  292E               	goto	l1225
   731  0199  120A  118A  280C   	ljmp	start
   732  019C                     __end_of_main:
   733                           
   734                           	psect	text1
   735  0271                     __ptext1:	
   736 ;; *************** function _strlen *****************
   737 ;; Defined at:
   738 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strlen.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;  s               1    wreg     PTR const unsigned char 
   741 ;;		 -> main@valueStr(5), 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  s               1    5[COMMON] PTR const unsigned char 
   744 ;;		 -> main@valueStr(5), 
   745 ;;  cp              1    6[COMMON] PTR const unsigned char 
   746 ;;		 -> main@valueStr(5), 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  2    2[COMMON] unsigned int 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   756 ;;      Params:         2       0       0       0       0
   757 ;;      Locals:         2       0       0       0       0
   758 ;;      Temps:          1       0       0       0       0
   759 ;;      Totals:         5       0       0       0       0
   760 ;;Total ram usage:        5 bytes
   761 ;; Hardware stack levels used: 1
   762 ;; Hardware stack levels required when called: 1
   763 ;; This function calls:
   764 ;;		Nothing
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           
   771                           ;psect for function _strlen
   772  0271                     _strlen:
   773                           
   774                           ;incstack = 0
   775                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
   776                           ;strlen@s stored from wreg
   777  0271  00F5               	movwf	strlen@s
   778  0272                     l1169:
   779  0272  0875               	movf	strlen@s,w
   780  0273  00F4               	movwf	??_strlen
   781  0274  0874               	movf	??_strlen,w
   782  0275  00F6               	movwf	strlen@cp
   783  0276  2A7B               	goto	l1173
   784  0277                     l1171:
   785  0277  3001               	movlw	1
   786  0278  00F4               	movwf	??_strlen
   787  0279  0874               	movf	??_strlen,w
   788  027A  07F6               	addwf	strlen@cp,f
   789  027B                     l1173:
   790  027B  0876               	movf	strlen@cp,w
   791  027C  0084               	movwf	4
   792  027D  1383               	bcf	3,7	;select IRP bank0
   793  027E  0800               	movf	0,w
   794  027F  1D03               	btfss	3,2
   795  0280  2A82               	goto	u551
   796  0281  2A83               	goto	u550
   797  0282                     u551:
   798  0282  2A77               	goto	l1171
   799  0283                     u550:
   800  0283                     l1175:
   801  0283  0875               	movf	strlen@s,w
   802  0284  0276               	subwf	strlen@cp,w
   803  0285  00F2               	movwf	?_strlen
   804  0286  01F3               	clrf	?_strlen+1
   805  0287  1BF2               	btfsc	?_strlen,7
   806  0288  03F3               	decf	?_strlen+1,f
   807  0289                     l673:
   808  0289  0008               	return
   809  028A                     __end_of_strlen:
   810                           
   811                           	psect	text2
   812  0019                     __ptext2:	
   813 ;; *************** function _sprintf *****************
   814 ;; Defined at:
   815 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  sp              1    wreg     PTR unsigned char 
   818 ;;		 -> main@valueStr(5), 
   819 ;;  f               1    4[BANK0 ] PTR const unsigned char 
   820 ;;		 -> STR_2(4), 
   821 ;; Auto vars:     Size  Location     Type
   822 ;;  sp              1   15[BANK0 ] PTR unsigned char 
   823 ;;		 -> main@valueStr(5), 
   824 ;;  tmpval          4    0        struct .
   825 ;;  val             2   13[BANK0 ] unsigned int 
   826 ;;  cp              2    0        PTR const unsigned char 
   827 ;;  len             2    0        unsigned int 
   828 ;;  c               1   16[BANK0 ] unsigned char 
   829 ;;  prec            1   12[BANK0 ] char 
   830 ;;  flag            1   11[BANK0 ] unsigned char 
   831 ;;  ap              1   10[BANK0 ] PTR void [1]
   832 ;;		 -> ?_sprintf(2), 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  2    4[BANK0 ] int 
   835 ;; Registers used:
   836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   842 ;;      Params:         0       3       0       0       0
   843 ;;      Locals:         0       7       0       0       0
   844 ;;      Temps:          0       3       0       0       0
   845 ;;      Totals:         0      13       0       0       0
   846 ;;Total ram usage:       13 bytes
   847 ;; Hardware stack levels used: 1
   848 ;; Hardware stack levels required when called: 2
   849 ;; This function calls:
   850 ;;		___lwdiv
   851 ;;		___lwmod
   852 ;; This function is called by:
   853 ;;		_main
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           
   858                           ;psect for function _sprintf
   859  0019                     _sprintf:
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   863                           ;sprintf@sp stored from wreg
   864  0019  1283               	bcf	3,5	;RP0=0, select bank0
   865  001A  1303               	bcf	3,6	;RP1=0, select bank0
   866  001B  00AF               	movwf	sprintf@sp
   867  001C                     l1107:
   868                           
   869                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   870  001C  3025               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   871  001D  00A7               	movwf	??_sprintf
   872  001E  0827               	movf	??_sprintf,w
   873  001F  00AA               	movwf	sprintf@ap
   874                           
   875                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   876  0020  28EC               	goto	l1159
   877  0021                     l1109:
   878                           
   879                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   880  0021  3025               	movlw	37
   881  0022  0630               	xorwf	sprintf@c,w
   882  0023  1903               	btfsc	3,2
   883  0024  2826               	goto	u481
   884  0025  2827               	goto	u480
   885  0026                     u481:
   886  0026  2833               	goto	l1115
   887  0027                     u480:
   888  0027                     l1111:
   889                           
   890                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   891  0027  0830               	movf	sprintf@c,w
   892  0028  00A7               	movwf	??_sprintf
   893  0029  082F               	movf	sprintf@sp,w
   894  002A  0084               	movwf	4
   895  002B  0827               	movf	??_sprintf,w
   896  002C  1383               	bcf	3,7	;select IRP bank0
   897  002D  0080               	movwf	0
   898  002E                     l1113:
   899  002E  3001               	movlw	1
   900  002F  00A7               	movwf	??_sprintf
   901  0030  0827               	movf	??_sprintf,w
   902  0031  07AF               	addwf	sprintf@sp,f
   903                           
   904                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
   905  0032  28EC               	goto	l1159
   906  0033                     l1115:
   907                           
   908                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   909  0033  01AB               	clrf	sprintf@flag
   910  0034                     l1119:	
   911                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   912                           
   913  0034  3001               	movlw	1
   914  0035  07A4               	addwf	sprintf@f,f
   915  0036  30FF               	movlw	-1
   916  0037  0724               	addwf	sprintf@f,w
   917  0038  0084               	movwf	4
   918  0039  120A  118A  22A3  120A  118A  	fcall	stringdir
   919  003E  00B0               	movwf	sprintf@c
   920  003F  00A7               	movwf	??_sprintf
   921  0040  01A8               	clrf	??_sprintf+1
   922                           
   923                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   924                           ; Switch size 1, requested type "simple"
   925                           ; Number of cases is 1, Range of values is 0 to 0
   926                           ; switch strategies available:
   927                           ; Name         Instructions Cycles
   928                           ; simple_byte            4     3 (average)
   929                           ; direct_byte           11     8 (fixed)
   930                           ; jumptable            260     6 (fixed)
   931                           ;	Chosen strategy is simple_byte
   932  0041  0828               	movf	??_sprintf+1,w
   933  0042  3A00               	xorlw	0	; case 0
   934  0043  1903               	skipnz
   935  0044  2846               	goto	l1281
   936  0045  28EC               	goto	l1159
   937  0046                     l1281:
   938                           
   939                           ; Switch size 1, requested type "simple"
   940                           ; Number of cases is 3, Range of values is 0 to 105
   941                           ; switch strategies available:
   942                           ; Name         Instructions Cycles
   943                           ; simple_byte           10     6 (average)
   944                           ; jumptable            260     6 (fixed)
   945                           ;	Chosen strategy is simple_byte
   946  0046  0827               	movf	??_sprintf,w
   947  0047  3A00               	xorlw	0	; case 0
   948  0048  1903               	skipnz
   949  0049  28FE               	goto	l1161
   950  004A  3A64               	xorlw	100	; case 100
   951  004B  1903               	skipnz
   952  004C  2851               	goto	l1121
   953  004D  3A0D               	xorlw	13	; case 105
   954  004E  1903               	skipnz
   955  004F  2851               	goto	l1121
   956  0050  28EC               	goto	l1159
   957  0051                     l1121:
   958                           
   959                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
   960  0051  082A               	movf	sprintf@ap,w
   961  0052  0084               	movwf	4
   962  0053  1383               	bcf	3,7	;select IRP bank0
   963  0054  0800               	movf	0,w
   964  0055  00AD               	movwf	sprintf@val
   965  0056  0A84               	incf	4,f
   966  0057  0800               	movf	0,w
   967  0058  00AE               	movwf	sprintf@val+1
   968  0059                     l1123:
   969  0059  3002               	movlw	2
   970  005A  00A7               	movwf	??_sprintf
   971  005B  0827               	movf	??_sprintf,w
   972  005C  07AA               	addwf	sprintf@ap,f
   973  005D                     l1125:
   974                           
   975                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
   976  005D  1FAE               	btfss	sprintf@val+1,7
   977  005E  2860               	goto	u491
   978  005F  2861               	goto	u490
   979  0060                     u491:
   980  0060  286A               	goto	l1131
   981  0061                     u490:
   982  0061                     l1127:
   983                           
   984                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
   985  0061  3003               	movlw	3
   986  0062  00A7               	movwf	??_sprintf
   987  0063  0827               	movf	??_sprintf,w
   988  0064  04AB               	iorwf	sprintf@flag,f
   989  0065                     l1129:
   990                           
   991                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
   992  0065  09AD               	comf	sprintf@val,f
   993  0066  09AE               	comf	sprintf@val+1,f
   994  0067  0AAD               	incf	sprintf@val,f
   995  0068  1903               	skipnz
   996  0069  0AAE               	incf	sprintf@val+1,f
   997  006A                     l1131:
   998                           
   999                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1000  006A  01B0               	clrf	sprintf@c
  1001  006B  0AB0               	incf	sprintf@c,f
  1002  006C                     l1137:
  1003                           
  1004                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1005  006C  0830               	movf	sprintf@c,w
  1006  006D  00A7               	movwf	??_sprintf
  1007  006E  0727               	addwf	??_sprintf,w
  1008  006F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1009  0070  0084               	movwf	4
  1010  0071  120A  118A  22A3  120A  118A  	fcall	stringdir
  1011  0076  00A8               	movwf	??_sprintf+1
  1012  0077  120A  118A  22A3  120A  118A  	fcall	stringdir
  1013  007C  00A9               	movwf	??_sprintf+2
  1014  007D  0829               	movf	??_sprintf+2,w
  1015  007E  022E               	subwf	sprintf@val+1,w
  1016  007F  1D03               	skipz
  1017  0080  2883               	goto	u505
  1018  0081  0828               	movf	??_sprintf+1,w
  1019  0082  022D               	subwf	sprintf@val,w
  1020  0083                     u505:
  1021  0083  1803               	skipnc
  1022  0084  2886               	goto	u501
  1023  0085  2887               	goto	u500
  1024  0086                     u501:
  1025  0086  2888               	goto	l1141
  1026  0087                     u500:
  1027  0087  2892               	goto	l1143
  1028  0088                     l1141:
  1029  0088  3001               	movlw	1
  1030  0089  00A7               	movwf	??_sprintf
  1031  008A  0827               	movf	??_sprintf,w
  1032  008B  07B0               	addwf	sprintf@c,f
  1033  008C  3005               	movlw	5
  1034  008D  0630               	xorwf	sprintf@c,w
  1035  008E  1D03               	btfss	3,2
  1036  008F  2891               	goto	u511
  1037  0090  2892               	goto	u510
  1038  0091                     u511:
  1039  0091  286C               	goto	l1137
  1040  0092                     u510:
  1041  0092                     l1143:
  1042                           
  1043                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1044  0092  082B               	movf	sprintf@flag,w
  1045  0093  3903               	andlw	3
  1046  0094  1903               	btfsc	3,2
  1047  0095  2897               	goto	u521
  1048  0096  2898               	goto	u520
  1049  0097                     u521:
  1050  0097  28A3               	goto	l1149
  1051  0098                     u520:
  1052  0098                     l1145:
  1053                           
  1054                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1055  0098  302D               	movlw	45
  1056  0099  00A7               	movwf	??_sprintf
  1057  009A  082F               	movf	sprintf@sp,w
  1058  009B  0084               	movwf	4
  1059  009C  0827               	movf	??_sprintf,w
  1060  009D  1383               	bcf	3,7	;select IRP bank0
  1061  009E  0080               	movwf	0
  1062  009F                     l1147:
  1063  009F  3001               	movlw	1
  1064  00A0  00A7               	movwf	??_sprintf
  1065  00A1  0827               	movf	??_sprintf,w
  1066  00A2  07AF               	addwf	sprintf@sp,f
  1067  00A3                     l1149:
  1068                           
  1069                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1070  00A3  0830               	movf	sprintf@c,w
  1071  00A4  00A7               	movwf	??_sprintf
  1072  00A5  0827               	movf	??_sprintf,w
  1073  00A6  00AC               	movwf	sprintf@prec
  1074                           
  1075                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1076  00A7  28E3               	goto	l1157
  1077  00A8                     l1151:
  1078                           
  1079                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1080  00A8  300A               	movlw	10
  1081  00A9  00A0               	movwf	___lwmod@divisor
  1082  00AA  3000               	movlw	0
  1083  00AB  00A1               	movwf	___lwmod@divisor+1
  1084  00AC  082C               	movf	sprintf@prec,w
  1085  00AD  00A7               	movwf	??_sprintf
  1086  00AE  0727               	addwf	??_sprintf,w
  1087  00AF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1088  00B0  0084               	movwf	4
  1089  00B1  120A  118A  22A3  120A  118A  	fcall	stringdir
  1090  00B6  00F2               	movwf	___lwdiv@divisor
  1091  00B7  120A  118A  22A3  120A  118A  	fcall	stringdir
  1092  00BC  00F3               	movwf	___lwdiv@divisor+1
  1093  00BD  082E               	movf	sprintf@val+1,w
  1094  00BE  00F5               	movwf	___lwdiv@dividend+1
  1095  00BF  082D               	movf	sprintf@val,w
  1096  00C0  00F4               	movwf	___lwdiv@dividend
  1097  00C1  120A  118A  219C  120A  118A  	fcall	___lwdiv
  1098  00C6  0873               	movf	?___lwdiv+1,w
  1099  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1100  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1101  00C9  00A3               	movwf	___lwmod@dividend+1
  1102  00CA  0872               	movf	?___lwdiv,w
  1103  00CB  00A2               	movwf	___lwmod@dividend
  1104  00CC  120A  118A  21E0  120A  118A  	fcall	___lwmod
  1105  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1106  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1107  00D3  0820               	movf	?___lwmod,w
  1108  00D4  3E30               	addlw	48
  1109  00D5  00A8               	movwf	??_sprintf+1
  1110  00D6  0828               	movf	??_sprintf+1,w
  1111  00D7  00B0               	movwf	sprintf@c
  1112  00D8                     l1153:
  1113                           
  1114                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1115  00D8  0830               	movf	sprintf@c,w
  1116  00D9  00A7               	movwf	??_sprintf
  1117  00DA  082F               	movf	sprintf@sp,w
  1118  00DB  0084               	movwf	4
  1119  00DC  0827               	movf	??_sprintf,w
  1120  00DD  1383               	bcf	3,7	;select IRP bank0
  1121  00DE  0080               	movwf	0
  1122  00DF                     l1155:
  1123  00DF  3001               	movlw	1
  1124  00E0  00A7               	movwf	??_sprintf
  1125  00E1  0827               	movf	??_sprintf,w
  1126  00E2  07AF               	addwf	sprintf@sp,f
  1127  00E3                     l1157:
  1128                           
  1129                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1130  00E3  30FF               	movlw	255
  1131  00E4  00A7               	movwf	??_sprintf
  1132  00E5  0827               	movf	??_sprintf,w
  1133  00E6  07AC               	addwf	sprintf@prec,f
  1134  00E7  0A2C               	incf	sprintf@prec,w
  1135  00E8  1D03               	btfss	3,2
  1136  00E9  28EB               	goto	u531
  1137  00EA  28EC               	goto	u530
  1138  00EB                     u531:
  1139  00EB  28A8               	goto	l1151
  1140  00EC                     u530:
  1141  00EC                     l1159:
  1142                           
  1143                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1144  00EC  3001               	movlw	1
  1145  00ED  07A4               	addwf	sprintf@f,f
  1146  00EE  30FF               	movlw	-1
  1147  00EF  0724               	addwf	sprintf@f,w
  1148  00F0  0084               	movwf	4
  1149  00F1  120A  118A  22A3  120A  118A  	fcall	stringdir
  1150  00F6  00A7               	movwf	??_sprintf
  1151  00F7  0827               	movf	??_sprintf,w
  1152  00F8  00B0               	movwf	sprintf@c
  1153  00F9  0830               	movf	sprintf@c,w
  1154  00FA  1D03               	btfss	3,2
  1155  00FB  28FD               	goto	u541
  1156  00FC  28FE               	goto	u540
  1157  00FD                     u541:
  1158  00FD  2821               	goto	l1109
  1159  00FE                     u540:
  1160  00FE                     l1161:
  1161                           
  1162                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1163  00FE  082F               	movf	sprintf@sp,w
  1164  00FF  0084               	movwf	4
  1165  0100  1383               	bcf	3,7	;select IRP bank0
  1166  0101  0180               	clrf	0
  1167  0102                     l215:
  1168  0102  0008               	return
  1169  0103                     __end_of_sprintf:
  1170                           
  1171                           	psect	text3
  1172  01E0                     __ptext3:	
  1173 ;; *************** function ___lwmod *****************
  1174 ;; Defined at:
  1175 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  divisor         2    0[BANK0 ] unsigned int 
  1178 ;;  dividend        2    2[BANK0 ] unsigned int 
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;  counter         1   11[COMMON] unsigned char 
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  2    0[BANK0 ] unsigned int 
  1183 ;; Registers used:
  1184 ;;		wreg, status,2, status,0
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1190 ;;      Params:         0       4       0       0       0
  1191 ;;      Locals:         1       0       0       0       0
  1192 ;;      Temps:          1       0       0       0       0
  1193 ;;      Totals:         2       4       0       0       0
  1194 ;;Total ram usage:        6 bytes
  1195 ;; Hardware stack levels used: 1
  1196 ;; Hardware stack levels required when called: 1
  1197 ;; This function calls:
  1198 ;;		Nothing
  1199 ;; This function is called by:
  1200 ;;		_sprintf
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           
  1205                           ;psect for function ___lwmod
  1206  01E0                     ___lwmod:
  1207  01E0                     l1057:	
  1208                           ;incstack = 0
  1209                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1210                           
  1211  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1212  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  1213  01E2  0820               	movf	___lwmod@divisor,w
  1214  01E3  0421               	iorwf	___lwmod@divisor+1,w
  1215  01E4  1903               	btfsc	3,2
  1216  01E5  29E7               	goto	u381
  1217  01E6  29E8               	goto	u380
  1218  01E7                     u381:
  1219  01E7  2A17               	goto	l1075
  1220  01E8                     u380:
  1221  01E8                     l1059:
  1222  01E8  01FB               	clrf	___lwmod@counter
  1223  01E9  0AFB               	incf	___lwmod@counter,f
  1224  01EA  29F6               	goto	l1065
  1225  01EB                     l1061:
  1226  01EB  3001               	movlw	1
  1227  01EC                     u395:
  1228  01EC  1003               	clrc
  1229  01ED  0DA0               	rlf	___lwmod@divisor,f
  1230  01EE  0DA1               	rlf	___lwmod@divisor+1,f
  1231  01EF  3EFF               	addlw	-1
  1232  01F0  1D03               	skipz
  1233  01F1  29EC               	goto	u395
  1234  01F2                     l1063:
  1235  01F2  3001               	movlw	1
  1236  01F3  00FA               	movwf	??___lwmod
  1237  01F4  087A               	movf	??___lwmod,w
  1238  01F5  07FB               	addwf	___lwmod@counter,f
  1239  01F6                     l1065:
  1240  01F6  1FA1               	btfss	___lwmod@divisor+1,7
  1241  01F7  29F9               	goto	u401
  1242  01F8  29FA               	goto	u400
  1243  01F9                     u401:
  1244  01F9  29EB               	goto	l1061
  1245  01FA                     u400:
  1246  01FA                     l1067:
  1247  01FA  0821               	movf	___lwmod@divisor+1,w
  1248  01FB  0223               	subwf	___lwmod@dividend+1,w
  1249  01FC  1D03               	skipz
  1250  01FD  2A00               	goto	u415
  1251  01FE  0820               	movf	___lwmod@divisor,w
  1252  01FF  0222               	subwf	___lwmod@dividend,w
  1253  0200                     u415:
  1254  0200  1C03               	skipc
  1255  0201  2A03               	goto	u411
  1256  0202  2A04               	goto	u410
  1257  0203                     u411:
  1258  0203  2A0A               	goto	l1071
  1259  0204                     u410:
  1260  0204                     l1069:
  1261  0204  0820               	movf	___lwmod@divisor,w
  1262  0205  02A2               	subwf	___lwmod@dividend,f
  1263  0206  0821               	movf	___lwmod@divisor+1,w
  1264  0207  1C03               	skipc
  1265  0208  03A3               	decf	___lwmod@dividend+1,f
  1266  0209  02A3               	subwf	___lwmod@dividend+1,f
  1267  020A                     l1071:
  1268  020A  3001               	movlw	1
  1269  020B                     u425:
  1270  020B  1003               	clrc
  1271  020C  0CA1               	rrf	___lwmod@divisor+1,f
  1272  020D  0CA0               	rrf	___lwmod@divisor,f
  1273  020E  3EFF               	addlw	-1
  1274  020F  1D03               	skipz
  1275  0210  2A0B               	goto	u425
  1276  0211                     l1073:
  1277  0211  3001               	movlw	1
  1278  0212  02FB               	subwf	___lwmod@counter,f
  1279  0213  1D03               	btfss	3,2
  1280  0214  2A16               	goto	u431
  1281  0215  2A17               	goto	u430
  1282  0216                     u431:
  1283  0216  29FA               	goto	l1067
  1284  0217                     u430:
  1285  0217                     l1075:
  1286  0217  0823               	movf	___lwmod@dividend+1,w
  1287  0218  00A1               	movwf	?___lwmod+1
  1288  0219  0822               	movf	___lwmod@dividend,w
  1289  021A  00A0               	movwf	?___lwmod
  1290  021B                     l501:
  1291  021B  0008               	return
  1292  021C                     __end_of___lwmod:
  1293                           
  1294                           	psect	text4
  1295  019C                     __ptext4:	
  1296 ;; *************** function ___lwdiv *****************
  1297 ;; Defined at:
  1298 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1299 ;; Parameters:    Size  Location     Type
  1300 ;;  divisor         2    2[COMMON] unsigned int 
  1301 ;;  dividend        2    4[COMMON] unsigned int 
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;  quotient        2    7[COMMON] unsigned int 
  1304 ;;  counter         1    9[COMMON] unsigned char 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  2    2[COMMON] unsigned int 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2, status,0
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1314 ;;      Params:         4       0       0       0       0
  1315 ;;      Locals:         3       0       0       0       0
  1316 ;;      Temps:          1       0       0       0       0
  1317 ;;      Totals:         8       0       0       0       0
  1318 ;;Total ram usage:        8 bytes
  1319 ;; Hardware stack levels used: 1
  1320 ;; Hardware stack levels required when called: 1
  1321 ;; This function calls:
  1322 ;;		Nothing
  1323 ;; This function is called by:
  1324 ;;		_sprintf
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           
  1329                           ;psect for function ___lwdiv
  1330  019C                     ___lwdiv:
  1331  019C                     l1031:	
  1332                           ;incstack = 0
  1333                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1334                           
  1335  019C  01F7               	clrf	___lwdiv@quotient
  1336  019D  01F8               	clrf	___lwdiv@quotient+1
  1337  019E                     l1033:
  1338  019E  0872               	movf	___lwdiv@divisor,w
  1339  019F  0473               	iorwf	___lwdiv@divisor+1,w
  1340  01A0  1903               	btfsc	3,2
  1341  01A1  29A3               	goto	u311
  1342  01A2  29A4               	goto	u310
  1343  01A3                     u311:
  1344  01A3  29DB               	goto	l1053
  1345  01A4                     u310:
  1346  01A4                     l1035:
  1347  01A4  01F9               	clrf	___lwdiv@counter
  1348  01A5  0AF9               	incf	___lwdiv@counter,f
  1349  01A6  29B2               	goto	l1041
  1350  01A7                     l1037:
  1351  01A7  3001               	movlw	1
  1352  01A8                     u325:
  1353  01A8  1003               	clrc
  1354  01A9  0DF2               	rlf	___lwdiv@divisor,f
  1355  01AA  0DF3               	rlf	___lwdiv@divisor+1,f
  1356  01AB  3EFF               	addlw	-1
  1357  01AC  1D03               	skipz
  1358  01AD  29A8               	goto	u325
  1359  01AE                     l1039:
  1360  01AE  3001               	movlw	1
  1361  01AF  00F6               	movwf	??___lwdiv
  1362  01B0  0876               	movf	??___lwdiv,w
  1363  01B1  07F9               	addwf	___lwdiv@counter,f
  1364  01B2                     l1041:
  1365  01B2  1FF3               	btfss	___lwdiv@divisor+1,7
  1366  01B3  29B5               	goto	u331
  1367  01B4  29B6               	goto	u330
  1368  01B5                     u331:
  1369  01B5  29A7               	goto	l1037
  1370  01B6                     u330:
  1371  01B6                     l1043:
  1372  01B6  3001               	movlw	1
  1373  01B7                     u345:
  1374  01B7  1003               	clrc
  1375  01B8  0DF7               	rlf	___lwdiv@quotient,f
  1376  01B9  0DF8               	rlf	___lwdiv@quotient+1,f
  1377  01BA  3EFF               	addlw	-1
  1378  01BB  1D03               	skipz
  1379  01BC  29B7               	goto	u345
  1380  01BD  0873               	movf	___lwdiv@divisor+1,w
  1381  01BE  0275               	subwf	___lwdiv@dividend+1,w
  1382  01BF  1D03               	skipz
  1383  01C0  29C3               	goto	u355
  1384  01C1  0872               	movf	___lwdiv@divisor,w
  1385  01C2  0274               	subwf	___lwdiv@dividend,w
  1386  01C3                     u355:
  1387  01C3  1C03               	skipc
  1388  01C4  29C6               	goto	u351
  1389  01C5  29C7               	goto	u350
  1390  01C6                     u351:
  1391  01C6  29CE               	goto	l1049
  1392  01C7                     u350:
  1393  01C7                     l1045:
  1394  01C7  0872               	movf	___lwdiv@divisor,w
  1395  01C8  02F4               	subwf	___lwdiv@dividend,f
  1396  01C9  0873               	movf	___lwdiv@divisor+1,w
  1397  01CA  1C03               	skipc
  1398  01CB  03F5               	decf	___lwdiv@dividend+1,f
  1399  01CC  02F5               	subwf	___lwdiv@dividend+1,f
  1400  01CD                     l1047:
  1401  01CD  1477               	bsf	___lwdiv@quotient,0
  1402  01CE                     l1049:
  1403  01CE  3001               	movlw	1
  1404  01CF                     u365:
  1405  01CF  1003               	clrc
  1406  01D0  0CF3               	rrf	___lwdiv@divisor+1,f
  1407  01D1  0CF2               	rrf	___lwdiv@divisor,f
  1408  01D2  3EFF               	addlw	-1
  1409  01D3  1D03               	skipz
  1410  01D4  29CF               	goto	u365
  1411  01D5                     l1051:
  1412  01D5  3001               	movlw	1
  1413  01D6  02F9               	subwf	___lwdiv@counter,f
  1414  01D7  1D03               	btfss	3,2
  1415  01D8  29DA               	goto	u371
  1416  01D9  29DB               	goto	u370
  1417  01DA                     u371:
  1418  01DA  29B6               	goto	l1043
  1419  01DB                     u370:
  1420  01DB                     l1053:
  1421  01DB  0878               	movf	___lwdiv@quotient+1,w
  1422  01DC  00F3               	movwf	?___lwdiv+1
  1423  01DD  0877               	movf	___lwdiv@quotient,w
  1424  01DE  00F2               	movwf	?___lwdiv
  1425  01DF                     l491:
  1426  01DF  0008               	return
  1427  01E0                     __end_of___lwdiv:
  1428                           
  1429                           	psect	text5
  1430  028A                     __ptext5:	
  1431 ;; *************** function _lcd_init *****************
  1432 ;; Defined at:
  1433 ;;		line 59 in file "./lcd.h"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0, pclath, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1447 ;;      Params:         0       0       0       0       0
  1448 ;;      Locals:         0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0
  1450 ;;      Totals:         0       0       0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used: 1
  1453 ;; Hardware stack levels required when called: 2
  1454 ;; This function calls:
  1455 ;;		_lcd_cmd
  1456 ;; This function is called by:
  1457 ;;		_main
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           
  1462                           ;psect for function _lcd_init
  1463  028A                     _lcd_init:
  1464  028A                     l1105:	
  1465                           ;incstack = 0
  1466                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1467                           
  1468                           
  1469                           ;./lcd.h: 60:     lcd_cmd(0x38);
  1470  028A  3038               	movlw	56
  1471  028B  120A  118A  22B9  120A  118A  	fcall	_lcd_cmd
  1472                           
  1473                           ;./lcd.h: 61:     lcd_cmd(0x66);
  1474  0290  3066               	movlw	102
  1475  0291  120A  118A  22B9  120A  118A  	fcall	_lcd_cmd
  1476                           
  1477                           ;./lcd.h: 62:     lcd_cmd(0x0c);
  1478  0296  300C               	movlw	12
  1479  0297  120A  118A  22B9  120A  118A  	fcall	_lcd_cmd
  1480                           
  1481                           ;./lcd.h: 63:     lcd_cmd(0x01);
  1482  029C  3001               	movlw	1
  1483  029D  120A  118A  22B9  120A  118A  	fcall	_lcd_cmd
  1484  02A2                     l84:
  1485  02A2  0008               	return
  1486  02A3                     __end_of_lcd_init:
  1487                           
  1488                           	psect	text6
  1489  02B9                     __ptext6:	
  1490 ;; *************** function _lcd_cmd *****************
  1491 ;; Defined at:
  1492 ;;		line 28 in file "./lcd.h"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;  cmd             1    wreg     unsigned char 
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  cmd             1    4[COMMON] unsigned char 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  1    wreg      void 
  1499 ;; Registers used:
  1500 ;;		wreg
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1506 ;;      Params:         0       0       0       0       0
  1507 ;;      Locals:         1       0       0       0       0
  1508 ;;      Temps:          2       0       0       0       0
  1509 ;;      Totals:         3       0       0       0       0
  1510 ;;Total ram usage:        3 bytes
  1511 ;; Hardware stack levels used: 1
  1512 ;; Hardware stack levels required when called: 1
  1513 ;; This function calls:
  1514 ;;		Nothing
  1515 ;; This function is called by:
  1516 ;;		_lcd_init
  1517 ;;		_main
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           
  1522                           ;psect for function _lcd_cmd
  1523  02B9                     _lcd_cmd:
  1524                           
  1525                           ;incstack = 0
  1526                           ; Regs used in _lcd_cmd: [wreg]
  1527                           ;lcd_cmd@cmd stored from wreg
  1528  02B9  00F4               	movwf	lcd_cmd@cmd
  1529  02BA                     l1021:
  1530                           
  1531                           ;./lcd.h: 29:     PORTD = cmd;
  1532  02BA  0874               	movf	lcd_cmd@cmd,w
  1533  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  1534  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  1535  02BD  0088               	movwf	8	;volatile
  1536  02BE                     l1023:
  1537                           
  1538                           ;./lcd.h: 30:     PORTCbits.RC0 = 0;
  1539  02BE  1007               	bcf	7,0	;volatile
  1540  02BF                     l1025:
  1541                           
  1542                           ;./lcd.h: 31:     PORTCbits.RC1 = 0;
  1543  02BF  1087               	bcf	7,1	;volatile
  1544  02C0                     l1027:
  1545                           
  1546                           ;./lcd.h: 32:     PORTCbits.RC2 = 1;
  1547  02C0  1507               	bsf	7,2	;volatile
  1548                           
  1549                           ;./lcd.h: 33:     _delay((unsigned long)((2)*(20000000/4000.0)));
  1550  02C1  300D               	movlw	13
  1551  02C2  00F3               	movwf	??_lcd_cmd+1
  1552  02C3  30FB               	movlw	251
  1553  02C4  00F2               	movwf	??_lcd_cmd
  1554  02C5                     u617:
  1555  02C5  0BF2               	decfsz	??_lcd_cmd,f
  1556  02C6  2AC5               	goto	u617
  1557  02C7  0BF3               	decfsz	??_lcd_cmd+1,f
  1558  02C8  2AC5               	goto	u617
  1559  02C9  2ACA               	nop2
  1560  02CA                     l1029:
  1561                           
  1562                           ;./lcd.h: 34:     PORTCbits.RC2 = 0;
  1563  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  1564  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  1565  02CC  1107               	bcf	7,2	;volatile
  1566  02CD                     l72:
  1567  02CD  0008               	return
  1568  02CE                     __end_of_lcd_cmd:
  1569                           
  1570                           	psect	text7
  1571  024C                     __ptext7:	
  1572 ;; *************** function _lcd_display *****************
  1573 ;; Defined at:
  1574 ;;		line 38 in file "./lcd.h"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  values          1    wreg     PTR unsigned char 
  1577 ;;		 -> main@valueStr(5), 
  1578 ;;  num             2    7[COMMON] unsigned int 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  values          1    0[BANK0 ] PTR unsigned char 
  1581 ;;		 -> main@valueStr(5), 
  1582 ;;  i               2    1[BANK0 ] int 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1592 ;;      Params:         2       0       0       0       0
  1593 ;;      Locals:         0       3       0       0       0
  1594 ;;      Temps:          1       0       0       0       0
  1595 ;;      Totals:         3       3       0       0       0
  1596 ;;Total ram usage:        6 bytes
  1597 ;; Hardware stack levels used: 1
  1598 ;; Hardware stack levels required when called: 2
  1599 ;; This function calls:
  1600 ;;		_lcd_data
  1601 ;; This function is called by:
  1602 ;;		_main
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           
  1607                           ;psect for function _lcd_display
  1608  024C                     _lcd_display:
  1609                           
  1610                           ;incstack = 0
  1611                           ; Regs used in _lcd_display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1612                           ;lcd_display@values stored from wreg
  1613  024C  1283               	bcf	3,5	;RP0=0, select bank0
  1614  024D  1303               	bcf	3,6	;RP1=0, select bank0
  1615  024E  00A0               	movwf	lcd_display@values
  1616  024F                     l1097:
  1617                           
  1618                           ;./lcd.h: 40:     for(int i = 0 ; i < num ; i++) {
  1619  024F  01A1               	clrf	lcd_display@i
  1620  0250  01A2               	clrf	lcd_display@i+1
  1621  0251  2A66               	goto	l1103
  1622  0252                     l1099:
  1623                           
  1624                           ;./lcd.h: 41:         lcd_data(values[i]);
  1625  0252  0821               	movf	lcd_display@i,w
  1626  0253  0720               	addwf	lcd_display@values,w
  1627  0254  00F9               	movwf	??_lcd_display
  1628  0255  0879               	movf	??_lcd_display,w
  1629  0256  0084               	movwf	4
  1630  0257  1383               	bcf	3,7	;select IRP bank0
  1631  0258  0800               	movf	0,w
  1632  0259  120A  118A  22CE  120A  118A  	fcall	_lcd_data
  1633  025E                     l1101:
  1634                           
  1635                           ;./lcd.h: 42:     }
  1636  025E  3001               	movlw	1
  1637  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1638  0260  1303               	bcf	3,6	;RP1=0, select bank0
  1639  0261  07A1               	addwf	lcd_display@i,f
  1640  0262  1803               	skipnc
  1641  0263  0AA2               	incf	lcd_display@i+1,f
  1642  0264  3000               	movlw	0
  1643  0265  07A2               	addwf	lcd_display@i+1,f
  1644  0266                     l1103:
  1645  0266  0878               	movf	lcd_display@num+1,w
  1646  0267  0222               	subwf	lcd_display@i+1,w
  1647  0268  1D03               	skipz
  1648  0269  2A6C               	goto	u475
  1649  026A  0877               	movf	lcd_display@num,w
  1650  026B  0221               	subwf	lcd_display@i,w
  1651  026C                     u475:
  1652  026C  1C03               	skipc
  1653  026D  2A6F               	goto	u471
  1654  026E  2A70               	goto	u470
  1655  026F                     u471:
  1656  026F  2A52               	goto	l1099
  1657  0270                     u470:
  1658  0270                     l78:
  1659  0270  0008               	return
  1660  0271                     __end_of_lcd_display:
  1661                           
  1662                           	psect	text8
  1663  02CE                     __ptext8:	
  1664 ;; *************** function _lcd_data *****************
  1665 ;; Defined at:
  1666 ;;		line 19 in file "./lcd.h"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  data            1    wreg     unsigned char 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  data            1    4[COMMON] unsigned char 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1680 ;;      Params:         0       0       0       0       0
  1681 ;;      Locals:         1       0       0       0       0
  1682 ;;      Temps:          2       0       0       0       0
  1683 ;;      Totals:         3       0       0       0       0
  1684 ;;Total ram usage:        3 bytes
  1685 ;; Hardware stack levels used: 1
  1686 ;; Hardware stack levels required when called: 1
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_lcd_display
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           
  1695                           ;psect for function _lcd_data
  1696  02CE                     _lcd_data:
  1697                           
  1698                           ;incstack = 0
  1699                           ; Regs used in _lcd_data: [wreg]
  1700                           ;lcd_data@data stored from wreg
  1701  02CE  00F4               	movwf	lcd_data@data
  1702  02CF                     l1011:
  1703                           
  1704                           ;./lcd.h: 20:     PORTD = data;
  1705  02CF  0874               	movf	lcd_data@data,w
  1706  02D0  1283               	bcf	3,5	;RP0=0, select bank0
  1707  02D1  1303               	bcf	3,6	;RP1=0, select bank0
  1708  02D2  0088               	movwf	8	;volatile
  1709  02D3                     l1013:
  1710                           
  1711                           ;./lcd.h: 21:     PORTCbits.RC0 = 1;
  1712  02D3  1407               	bsf	7,0	;volatile
  1713  02D4                     l1015:
  1714                           
  1715                           ;./lcd.h: 22:     PORTCbits.RC1 = 0;
  1716  02D4  1087               	bcf	7,1	;volatile
  1717  02D5                     l1017:
  1718                           
  1719                           ;./lcd.h: 23:     PORTCbits.RC2 = 1;
  1720  02D5  1507               	bsf	7,2	;volatile
  1721                           
  1722                           ;./lcd.h: 24:     _delay((unsigned long)((2)*(20000000/4000.0)));
  1723  02D6  300D               	movlw	13
  1724  02D7  00F3               	movwf	??_lcd_data+1
  1725  02D8  30FB               	movlw	251
  1726  02D9  00F2               	movwf	??_lcd_data
  1727  02DA                     u627:
  1728  02DA  0BF2               	decfsz	??_lcd_data,f
  1729  02DB  2ADA               	goto	u627
  1730  02DC  0BF3               	decfsz	??_lcd_data+1,f
  1731  02DD  2ADA               	goto	u627
  1732  02DE  2ADF               	nop2
  1733  02DF                     l1019:
  1734                           
  1735                           ;./lcd.h: 25:     PORTCbits.RC2 = 0;
  1736  02DF  1283               	bcf	3,5	;RP0=0, select bank0
  1737  02E0  1303               	bcf	3,6	;RP1=0, select bank0
  1738  02E1  1107               	bcf	7,2	;volatile
  1739  02E2                     l69:
  1740  02E2  0008               	return
  1741  02E3                     __end_of_lcd_data:
  1742                           
  1743                           	psect	text9
  1744  02F7                     __ptext9:	
  1745 ;; *************** function _adc_init *****************
  1746 ;; Defined at:
  1747 ;;		line 14 in file "./adc.h"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1761 ;;      Params:         0       0       0       0       0
  1762 ;;      Locals:         0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0
  1764 ;;      Totals:         0       0       0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; Hardware stack levels required when called: 1
  1768 ;; This function calls:
  1769 ;;		Nothing
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           
  1776                           ;psect for function _adc_init
  1777  02F7                     _adc_init:
  1778  02F7                     l1079:	
  1779                           ;incstack = 0
  1780                           ; Regs used in _adc_init: [wreg]
  1781                           
  1782                           
  1783                           ;./adc.h: 15:      ADCON0 = 0x41;
  1784  02F7  3041               	movlw	65
  1785  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  1786  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  1787  02FA  009F               	movwf	31	;volatile
  1788                           
  1789                           ;./adc.h: 16:      ADCON1 = 0x80;
  1790  02FB  3080               	movlw	128
  1791  02FC  1683               	bsf	3,5	;RP0=1, select bank1
  1792  02FD  1303               	bcf	3,6	;RP1=0, select bank1
  1793  02FE  009F               	movwf	31	;volatile
  1794  02FF                     l59:
  1795  02FF  0008               	return
  1796  0300                     __end_of_adc_init:
  1797                           
  1798                           	psect	text10
  1799  021C                     __ptext10:	
  1800 ;; *************** function _ADC_Read *****************
  1801 ;; Defined at:
  1802 ;;		line 21 in file "./adc.h"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;  ANC             1    wreg     unsigned char 
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  ANC             1    6[COMMON] unsigned char 
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  2    2[COMMON] unsigned int 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1816 ;;      Params:         2       0       0       0       0
  1817 ;;      Locals:         1       0       0       0       0
  1818 ;;      Temps:          2       0       0       0       0
  1819 ;;      Totals:         5       0       0       0       0
  1820 ;;Total ram usage:        5 bytes
  1821 ;; Hardware stack levels used: 1
  1822 ;; Hardware stack levels required when called: 1
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		_main
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           
  1831                           ;psect for function _ADC_Read
  1832  021C                     _ADC_Read:
  1833                           
  1834                           ;incstack = 0
  1835                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  1836                           ;ADC_Read@ANC stored from wreg
  1837  021C  00F6               	movwf	ADC_Read@ANC
  1838  021D                     l1081:
  1839                           
  1840                           ;./adc.h: 21: uint16_t ADC_Read(uint8_t ANC);./adc.h: 22: {;./adc.h: 23:   if(ANC<0 || A
      +                          NC>7)
  1841  021D  3008               	movlw	8
  1842  021E  0276               	subwf	ADC_Read@ANC,w
  1843  021F  1C03               	skipc
  1844  0220  2A22               	goto	u441
  1845  0221  2A23               	goto	u440
  1846  0222                     u441:
  1847  0222  2A26               	goto	l1087
  1848  0223                     u440:
  1849  0223                     l1083:
  1850                           
  1851                           ;./adc.h: 24:   { return 0;}
  1852  0223  01F2               	clrf	?_ADC_Read
  1853  0224  01F3               	clrf	?_ADC_Read+1
  1854  0225  2A4B               	goto	l63
  1855  0226                     l1087:
  1856                           
  1857                           ;./adc.h: 26:   ADCON0 &= 0x11000101;
  1858  0226  3001               	movlw	1
  1859  0227  00F4               	movwf	??_ADC_Read
  1860  0228  0874               	movf	??_ADC_Read,w
  1861  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1862  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1863  022B  059F               	andwf	31,f	;volatile
  1864                           
  1865                           ;./adc.h: 27:   ADCON0 |= ANC<<3;
  1866  022C  0876               	movf	ADC_Read@ANC,w	;volatile
  1867  022D  00F4               	movwf	??_ADC_Read
  1868  022E  3002               	movlw	2
  1869  022F                     u455:
  1870  022F  1003               	clrc
  1871  0230  0DF4               	rlf	??_ADC_Read,f
  1872  0231  3EFF               	addlw	-1
  1873  0232  1D03               	skipz
  1874  0233  2A2F               	goto	u455
  1875  0234  1003               	clrc
  1876  0235  0D74               	rlf	??_ADC_Read,w
  1877  0236  00F5               	movwf	??_ADC_Read+1
  1878  0237  0875               	movf	??_ADC_Read+1,w
  1879  0238  049F               	iorwf	31,f	;volatile
  1880  0239                     l1089:
  1881                           
  1882                           ;./adc.h: 29:   _delay((unsigned long)((30)*(20000000/4000000.0)));
  1883  0239  3031               	movlw	49
  1884  023A  00F4               	movwf	??_ADC_Read
  1885  023B                     u637:
  1886  023B  0BF4               	decfsz	??_ADC_Read,f
  1887  023C  2A3B               	goto	u637
  1888  023D  2A3E               	nop2
  1889  023E                     l1091:
  1890                           
  1891                           ;./adc.h: 30:   GO_DONE = 1;
  1892  023E  1283               	bcf	3,5	;RP0=0, select bank0
  1893  023F  1303               	bcf	3,6	;RP1=0, select bank0
  1894  0240  151F               	bsf	31,2	;volatile
  1895  0241                     l64:	
  1896                           ;./adc.h: 31:   while(ADCON0bits.GO_DONE);
  1897                           
  1898  0241  191F               	btfsc	31,2	;volatile
  1899  0242  2A44               	goto	u461
  1900  0243  2A45               	goto	u460
  1901  0244                     u461:
  1902  0244  2A41               	goto	l64
  1903  0245                     u460:
  1904  0245                     l1093:
  1905                           
  1906                           ;./adc.h: 33:   return ((ADRESH << 8) + ADRESL);
  1907  0245  081E               	movf	30,w	;volatile
  1908  0246  00F3               	movwf	?_ADC_Read+1
  1909  0247  1683               	bsf	3,5	;RP0=1, select bank1
  1910  0248  1303               	bcf	3,6	;RP1=0, select bank1
  1911  0249  081E               	movf	30,w	;volatile
  1912  024A  00F2               	movwf	?_ADC_Read
  1913  024B                     l63:
  1914  024B  0008               	return
  1915  024C                     __end_of_ADC_Read:
  1916                           
  1917                           	psect	text11
  1918  02E3                     __ptext11:	
  1919 ;; *************** function _isr *****************
  1920 ;; Defined at:
  1921 ;;		line 21 in file "main.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		wreg
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1935 ;;      Params:         0       0       0       0       0
  1936 ;;      Locals:         0       0       0       0       0
  1937 ;;      Temps:          2       0       0       0       0
  1938 ;;      Totals:         2       0       0       0       0
  1939 ;;Total ram usage:        2 bytes
  1940 ;; Hardware stack levels used: 1
  1941 ;; This function calls:
  1942 ;;		Nothing
  1943 ;; This function is called by:
  1944 ;;		Interrupt level 1
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           
  1949                           ;psect for function _isr
  1950  02E3                     _isr:
  1951  02E3                     i1l1179:
  1952                           
  1953                           ;main.c: 22:   if(TMR1IF == 1) {
  1954  02E3  1283               	bcf	3,5	;RP0=0, select bank0
  1955  02E4  1303               	bcf	3,6	;RP1=0, select bank0
  1956  02E5  1C0C               	btfss	12,0	;volatile
  1957  02E6  2AE8               	goto	u56_21
  1958  02E7  2AE9               	goto	u56_20
  1959  02E8                     u56_21:
  1960  02E8  2AF0               	goto	i1l92
  1961  02E9                     u56_20:
  1962  02E9                     i1l1181:
  1963                           
  1964                           ;main.c: 23:      timer++;
  1965  02E9  3001               	movlw	1
  1966  02EA  07BB               	addwf	_timer,f
  1967  02EB  1803               	skipnc
  1968  02EC  0ABC               	incf	_timer+1,f
  1969  02ED  3000               	movlw	0
  1970  02EE  07BC               	addwf	_timer+1,f
  1971  02EF                     i1l1183:
  1972                           
  1973                           ;main.c: 24:             TMR1IF = 0;
  1974  02EF  100C               	bcf	12,0	;volatile
  1975  02F0                     i1l92:
  1976  02F0  0871               	movf	??_isr+1,w
  1977  02F1  008A               	movwf	10
  1978  02F2  0E70               	swapf	??_isr,w
  1979  02F3  0083               	movwf	3
  1980  02F4  0EFE               	swapf	btemp,f
  1981  02F5  0E7E               	swapf	btemp,w
  1982  02F6  0009               	retfie
  1983  02F7                     __end_of_isr:
  1984  007E                     btemp	set	126	;btemp
  1985  007E                     wtemp0	set	126
  1986                           
  1987                           	psect	intentry
  1988  0004                     __pintentry:	
  1989                           ;incstack = 0
  1990                           ; Regs used in _isr: [wreg]
  1991                           
  1992  0004                     interrupt_function:
  1993  007E                     saved_w	set	btemp
  1994  0004  00FE               	movwf	btemp
  1995  0005  0E03               	swapf	3,w
  1996  0006  00F0               	movwf	??_isr
  1997  0007  080A               	movf	10,w
  1998  0008  00F1               	movwf	??_isr+1
  1999  0009  120A  118A  2AE3   	ljmp	_isr

Data Sizes:
    Strings     6
    Constant    10
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     25      29
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 5
		 -> main@valueStr(BANK0[5]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 5
		 -> main@valueStr(BANK0[5]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 4
		 -> STR_2(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 5
		 -> main@valueStr(BANK0[5]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__lcd_read	PTR unsigned char  size(1) Largest target is 2
		 -> STR_1(CODE[2]), 

    lcd_display@values	PTR unsigned char  size(1) Largest target is 5
		 -> main@valueStr(BANK0[5]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _lcd_init->_lcd_cmd
    _lcd_display->_strlen

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1765
                                             17 BANK0      8     8      0
                           _ADC_Read
                           _adc_init
                            _lcd_cmd
                        _lcd_display
                           _lcd_init
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               5     3      2     123
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              4 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                             10 COMMON     2     2      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0      22
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _lcd_display                                          6     4      2     221
                                              7 COMMON     3     1      2
                                              0 BANK0      3     3      0
                           _lcd_data
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      22
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             5     3      2      44
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   _adc_init
   _lcd_cmd
   _lcd_display
     _lcd_data
     _strlen (ARG)
   _lcd_init
     _lcd_cmd
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _strlen

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      29       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      1D       5       36.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      29      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat Dec 18 22:59:31 2021

                      pc 0002             lcd_data@data 0074                       l63 024B  
                     l64 0241                       l72 02CD                       l59 02FF  
                     l84 02A2                       l69 02E2                       l78 0270  
                     fsr 0004                      l215 0102                      l501 021B  
                    l491 01DF                      l673 0289                      _GIE 005F  
                    _RB1 0031                      u310 01A4                      u311 01A3  
                    u400 01FA                      u401 01F9                      u330 01B6  
                    u410 0204                      u331 01B5                      u411 0203  
                    u500 0087                      u325 01A8                      u501 0086  
                    u350 01C7                      u430 0217                      u510 0092  
                    u351 01C6                      u431 0216                      u415 0200  
                    u511 0091                      u440 0223                      u520 0098  
                    u600 0192                      u441 0222                      u345 01B7  
                    u425 020B                      u521 0097                      u505 0083  
                    u601 0191                      u370 01DB                      u530 00EC  
                    u371 01DA                      u355 01C3                      u531 00EB  
                    u460 0245                      u380 01E8                      u540 00FE  
                    u461 0244                      u365 01CF                      u381 01E7  
                    u541 00FD                      u470 0270                      u550 0283  
                    u455 022F                      u471 026F                      u551 0282  
                    u480 0027                      u617 02C5                      u481 0026  
                    u490 0061                      u570 0139                      u627 02DA  
                    u475 026C                      u395 01EC                      u491 0060  
                    u571 0138                      u580 0147                      u637 023B  
                    u581 0146                      u590 018C                      u591 018B  
                    u595 0188                      _isr 02E3                      fsr0 0004  
                    indf 0000                     l1011 02CF                     l1013 02D3  
                   l1101 025E                     l1021 02BA                     l1015 02D4  
                   l1103 0266                     l1023 02BE                     l1031 019C  
                   l1111 0027             lcd_display@i 0021                     l1017 02D5  
                   l1025 02BF                     l1105 028A                     l1041 01B2  
                   l1033 019E                     l1121 0051                     l1113 002E  
                   l1201 0115                     l1019 02DF                     l1027 02C0  
                   l1051 01D5                     l1043 01B6                     l1035 01A4  
                   l1131 006A                     l1123 0059                     l1115 0033  
                   l1107 001C                     l1211 011E                     l1203 0116  
                   l1029 02CA                     l1045 01C7                     l1037 01A7  
                   l1053 01DB                     l1061 01EB                     l1141 0088  
                   l1125 005D                     l1109 0021                     l1221 0126  
                   l1213 011F                     l1205 0117                     l1047 01CD  
                   l1039 01AE                     l1071 020A                     l1063 01F2  
                   l1151 00A8                     l1143 0092                     l1127 0061  
                   l1119 0034                     l1231 013F                     l1223 012B  
                   l1215 0120                     l1207 011A                     l1081 021D  
                   l1049 01CE                     l1073 0211                     l1065 01F6  
                   l1057 01E0                     l1153 00D8                     l1145 0098  
                   l1137 006C                     l1129 0065                     l1161 00FE  
                   l1241 0147                     l1233 0140                     l1225 012E  
                   l1217 0121                     l1209 011D                     l1091 023E  
                   l1083 0223                     l1067 01FA                     l1059 01E8  
                   l1075 0217                     l1155 00DF                     l1147 009F  
                   l1171 0277                     l1251 017D                     l1243 0149  
                   l1235 0141                     l1227 0139                     l1219 0121  
                   l1093 0245                     l1069 0204                     l1157 00E3  
                   l1149 00A3                     l1173 027B                     l1253 018C  
                   l1245 0155                     l1229 013B                     l1237 0142  
                   l1087 0226                     l1079 02F7                     l1159 00EC  
                   l1175 0283                     l1255 0192                     l1247 0163  
                   l1239 0143                     l1191 010E                     l1089 0239  
                   l1097 024F                     l1281 0046                     l1169 0272  
                   l1257 0193                     l1249 0169                     l1193 010F  
                   l1185 0103                     l1099 0252                     l1259 0197  
                   l1195 0110                     l1187 0107                     l1197 0111  
                   l1189 010B                     l1199 0112                     ?_isr 0070  
                   STR_1 02B7                     STR_2 02B3                     _PEIE 005E  
                   _INTF 0059                     i1l92 02F0                     _TMR1 000E  
                   _main 0103                     btemp 007E         __end_of_ADC_Read 024C  
                   start 000C                    ??_isr 0070                    ?_main 0070  
        __end_of___lwdiv 01E0          __end_of___lwmod 021C                    _PORTD 0008  
                  u56_20 02E9                    u56_21 02E8                    _TRISC 0087  
                  _TRISD 0088                    _TRISE 0089          __end_of_lcd_cmd 02CE  
        __end_of_dpowers 02B3                    _timer 003B             main@valueStr 0032  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 0103            main@adc_value 0037          __initialization 000F  
           __end_of_main 019C                   ??_main 0031           lcd_display@num 0077  
                 _ADCON0 001F                   _ADCON1 009F                   _ADRESH 001E  
                 _ADRESL 009E         __end_of_adc_init 0300                   i1l1181 02E9  
                 i1l1183 02EF                   i1l1179 02E3                   _TMR1IE 0460  
                 _TMR1IF 0060                   _TMR1ON 0080                   _TRISB0 0430  
                 _TRISB1 0431         __end_of_lcd_data 02E3         __end_of_lcd_init 02A3  
   __size_of_lcd_display 0025                ??___lwdiv 0076                ??___lwmod 007A  
              ??_lcd_cmd 0072                   _strlen 0271                ?_ADC_Read 0072  
                 saved_w 007E                ??_sprintf 0027  __end_of__initialization 0015  
         __pcstackCOMMON 0070               ??_ADC_Read 0074               __pbssBANK0 0039  
             __pmaintext 0103               __pintentry 0004                ?_adc_init 0070  
                ?_strlen 0072                  _GO_DONE 00FA        lcd_display@values 0020  
              ?_lcd_data 0070                ?_lcd_init 0070               __stringtab 02A3  
                ___lwdiv 019C                  ___lwmod 01E0               ??_adc_init 0072  
                __ptext1 0271                  __ptext2 0019                  __ptext3 01E0  
                __ptext4 019C                  __ptext5 028A                  __ptext6 02B9  
                __ptext7 024C                  __ptext8 02CE                  __ptext9 02F7  
                _lcd_cmd 02B9          __size_of_strlen 0019                _T1CONbits 0010  
                _dpowers 02A9             __size_of_isr 0014                  _timerOn 0039  
             ??_lcd_data 0072                  _sprintf 0019               ??_lcd_init 0075  
   end_of_initialization 0015                  strlen@s 0075                _PORTBbits 0006  
              _PORTCbits 0007                _PORTEbits 0009               lcd_cmd@cmd 0074  
      __size_of_ADC_Read 0030            ??_lcd_display 0079           __end_of_strlen 028A  
    start_initialization 000F              __end_of_isr 02F7      __end_of_lcd_display 0271  
               ??_strlen 0074        __size_of_adc_init 0009                ___latbits 0002  
          __pcstackBANK0 0020        __size_of_lcd_data 0015        __size_of_lcd_init 0019  
            sprintf@flag 002B              sprintf@prec 002C         ___lwdiv@dividend 0074  
               ?___lwdiv 0072                 ?___lwmod 0020                __pstrings 02A3  
               ?_lcd_cmd 0070                 _ADC_Read 021C              ADC_Read@ANC 0076  
       ___lwdiv@quotient 0077                 ?_sprintf 0024        interrupt_function 0004  
            _lcd_display 024C               _ADCON0bits 001F              __stringbase 02A8  
       __size_of___lwdiv 0044         __size_of___lwmod 003C       __end_of__stringtab 02A9  
               _adc_init 02F7         __size_of_lcd_cmd 0015               sprintf@val 002D  
        ___lwdiv@divisor 0072          ___lwdiv@counter 0079                 __ptext10 021C  
               __ptext11 02E3                 _lcd_data 02CE                 _lcd_init 028A  
       __size_of_sprintf 00EA            __size_of_main 0099                 intlevel1 0000  
              sprintf@ap 002A                sprintf@sp 002F         ___lwmod@dividend 0022  
              stringcode 02A3               _OPTION_REG 0081                 sprintf@c 0030  
               sprintf@f 0024          ___lwmod@divisor 0020                 strlen@cp 0076  
        ___lwmod@counter 007B                 stringdir 02A3                 stringtab 02A3  
           ?_lcd_display 0077  
